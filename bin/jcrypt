#!/usr/bin/env node

(function () {
    'use strict';

    let jcrypt = require('../lib/util.js'),
        Getopt = require('node-getopt'),
        callback = function (type, err, data) {
            console.log(!err ?
                ('Created ' + type + ' file ' + data) :
                '[ERROR] No such file'
            );
        },
        getopt, opt, filename;

    getopt = new Getopt([
        ['a', 'armor', 'Output the enciphered data as ASCII.'],
        ['d', 'decrypt=ARG', 'Perform decryption.'],
        ['e', 'encrypt=ARG', 'Perform encryption.'],
        ['o', 'output=ARG', 'The output file.  Will prompt for it if not given.'],
        ['r', 'recipients=ARG', 'The intended person(s).'],
        ['s', 'sign', 'Digitally sign as well as encipher.'],
        ['', 'stream', 'Bypasses all high-level APIs and calls low-lever stream API directly. Don\'t specify an output stream when wanting to stream directly to STDOUT.'],
        ['h', 'help', 'Display help.']
    ]).bindHelp();

    // `parseSystem` is an alias of parse(process.argv.slice(2)).
    opt = getopt.parseSystem().options;

    if ((filename = opt.decrypt) !== undefined) {
        if (opt.stream) {
            jcrypt.decryptStream(filename, opt.output);
        } else {
            jcrypt.decryptFile({
                filename: filename,
                output: opt.output,
                callback: callback.bind(null, 'decrypted')
            });
        }
    } else if ((filename = opt.encrypt) !== undefined) {
        if (opt.stream) {
            jcrypt.encryptStream(filename, opt.output);
        } else {
            jcrypt.encryptFile({
                filename: filename,
                output: opt.output,
                options: {
                    armor: opt.armor,
                    recipients: opt.recipients,
                    sign: opt.sign
                },
                callback: callback.bind(null, 'encrypted')
            });
        }
    }
}());

